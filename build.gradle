plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.20.0' // aplica application plugin de manera implicita
}


repositories {
    mavenCentral()
    jcenter()
}


//mainClassName = "$moduleName/inicio.MainApp"
mainClassName = "Orondo.inicio.MainApp"


javafx {
    version = "14"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.base', 'javafx.graphics' ]
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // dependencias de ikonli, para usar fontawesome en javafx
    //compile 'org.kordamp.ikonli:ikonli-core:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-javafx:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-fontawesome5-pack:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-metrizeicons-pack:11.3.4'
    compile 'org.kordamp.ikonli:ikonli-entypo-pack:11.3.4'
    
    
    /** 
     * Object to Document Mapper ODM for java and mongodb. Morphia
     * tambien contiene el conector de mongodb.
     * 
     * en module-info : requires mongo.java.driver;
    */
    compile 'dev.morphia.morphia:core:1.5.8'
    
    
    // tomado de https://bintray.com/bintray/jcenter/com.googlecode.json-simple%3Ajson-simple/1.1
    // intente varios de jcenter que proveian json.simple y no todos sirven porque sale un urror
    // con los paquetes.
    implementation 'com.googlecode.json-simple:json-simple:1.1'
    
    /**
     *Para evitar que salgan estos warnings:
     * SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".
     *  SLF4J: Defaulting to no-operation (NOP) logger implementation
     *  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
    */
    //compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.12.1'
    
    
    /**
     * Tablesaw is Java for data science. It includes a dataframe and 
     * a visualization library, as well as utilities for loading, transforming,
     * filtering, and summarizing data.
     * https://github.com/jtablesaw/tablesaw
    */
    //compile 'tech.tablesaw:tablesaw-core:0.36.0'
    
    // core libraries for java
    //https://github.com/google/guava
    
    // good candidate for the simulator
    //https://github.com/rossetti/JSL
    
    
    // DES paper
    // http://akira.ruc.dk/~keld/research/JAVASIMULATION/JAVASIMULATION-1.0/docs/Report.pdf
    
    // buen candidato para el simulador
    // https://ptolemy.berkeley.edu/
    
    // buen candidato para el simulador pero el desarrollo parece no ser 
    // activo
    //http://desmoj.sourceforge.net/home.html
}


jlink {
    launcher{
        name = 'Orondo' 
    }
}



/**
 * luche el dia entero del 1 de diciembre para saber porque getClass().getResources no funcionaba cuando se
 * usa gradle pero en los proyectos de ant si funciona. al final descubri que tiene que ver con que se debe copiar
 * el fxml a la carpeta de build donde estan los .classes. en teoria en un proyecto de gradle se debe hacer la copia de
 * manera automatica al meter el fxml en resources en una ruta equivalente a la de los .java. es decir que si los
 * .java estan en java/orondo.main entonces el fxml debe estar en resources/orondo.java. por alguna razon por mas que
 * trate y trate nunca funciono y la unica solucion fue agregar esta configuracion a gradle, que precisamente hace que
 * los resources se copien como debe de ser en su respectiva carpeta junto con los .classes
 * que tiene
 * 
 * ...
 * 
 * por alguna razon ya no es necesario hacer esto, pero lo dejo como referencia.
 * tal vez sea por la actualizacion de gradle de 6.0 a 6.5
 */
/*
sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main"
    }
    test {
        output.resourcesDir = "build/classes/test"
    }
} 
*/